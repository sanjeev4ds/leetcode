39. https://leetcode.com/problems/movie-rating/?envType=study-plan-v2&envId=top-sql-50

Movie Rating:

Table: Movies
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| movie_id      | int     |
| title         | varchar |
+---------------+---------+
movie_id is the primary key (column with unique values) for this table.
title is the name of the movie.
 
Table: Users
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| user_id       | int     |
| name          | varchar |
+---------------+---------+
user_id is the primary key (column with unique values) for this table.
The column 'name' has unique values.
Table: MovieRating

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| movie_id      | int     |
| user_id       | int     |
| rating        | int     |
| created_at    | date    |
+---------------+---------+
(movie_id, user_id) is the primary key (column with unique values) for this table.
This table contains the rating of a movie by a user in their review.
created_at is the user's review date. 
 
Write a solution to:
Find the name of the user who has rated the greatest number of movies. In case of a tie, return the lexicographically smaller user name.
Find the movie name with the highest average rating in February 2020. In case of a tie, return the lexicographically smaller movie name.
The result format is in the following example.

solution 1:
with cte_user_count as (
    select user_id, count(*) as count_ratings
    from MovieRating
    group by user_id
),
cte_movie_rating as (
    select movie_id, avg(rating) as avg_ratings
    from MovieRating
    where month(created_at)=2 and year(created_at)=2020
    group by movie_id
)

(
    select name as results
    from Users 
    left join cte_user_count
    on Users.user_id= cte_user_count.user_id
    where count_ratings=(
        select max(count_ratings) 
        from cte_user_count
    )
    order by name limit 1
)
union all
(
    select title as results
    from Movies 
    left join cte_movie_rating
    on Movies.movie_id= cte_movie_rating.movie_id
    where avg_ratings=(
        select max(avg_ratings) 
        from cte_movie_rating
    )
    order by title limit 1
);
